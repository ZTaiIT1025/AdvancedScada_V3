<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="DxErrorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg4OABwcHAYmJiYGMDAwVDk5OVRCQkKYR0dHmE1N
        TblNTU25TU1NuUhISLlDQ0OYOjo6mDExMVQnJydUHR0dBg4ODgYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ0NABoaGgAqKioAOzs7BkJCTQZJSV9URkZuVEND
        fZhCQoWYQUGMuUFBjLlBQY25QkKGuUREf5hHR3GYSkpiVENDT1Q8PDwGKysrBhsbGwANDQ0AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaGhoANDQ0TUdHR01aWlrhXl504WNj
        jv9UVKP/RUW5/z09wv81Ncz/NTXM/zY2zf89PcT/RUW8/1RUqP9kZJT/YGB4/1xcXOFJSUnhNjY2TRsb
        G00AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAAICAgADg4PQBRUVpNTEx2TUZG
        k+E/P6nhOTnA/zIyy/8rK9f/Jyfc/yMj4f8jI+H/JCTh/ycn3f8rK9j/MjLO/zk5w/9AQK7/R0eZ4U1N
        fOFTU19NOjo/TSAgIAAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgIABAQEByV1dgcm9v
        gP1RUab9MzPN/yEh3/8PD/L/EBDz/xER9f8REfX/EhL2/xIS9v8SEvb/ERH1/xER9f8QEPT/Dw/z/yEh
        5P8zM9b/UlKv/3FxiP1ZWWT9QUFBciAgIHIAAAAAAAAAAAAAAAAAAAAAAAAAAA0NDQAbGxsAOjo/AFpa
        Y3JQUIlyR0ev/TQ0x/0hIeD/GBjn/xAQ7v8QEO//ERHw/xER8f8REfP/Fxfs/x4e5f8ZGen/FBTt/xIS
        8P8QEPT/GRns/yEh5f80NM3/R0e2/VFRjv1cXGdyPDxCchwcHAAODg4AAAAAAAAAAAAAAAAAGxsbADY2
        Nk1VVV5NdXWG/UpKsv0fH97/Fxfp/xAQ9P8QEO//ERHq/xER6/8REez/ERHu/xER8P8dHeL/KirV/yAg
        3f8XF+X/FBTt/xIS9v8REfX/EBD0/xcX7P8eHuT/Skq5/3d3jv1YWGP9OTk5TRwcHE0AAAAAAAAAAA4O
        DgAuLi4AT09PTVJSeE1VVaL9NjbE/RcX5v8TE+z/EBDz/zQ04v9YWNH/ZWXb/3Nz5v9mZt//WVnZ/2tr
        2P99fdf/enre/3h45f9SUuX/LS3l/x8f7f8REfT/FBTv/xcX6f82Nsr/Vlar/VRUfv1SUlJNMTExTRAQ
        EAAQEBAAHBwcBkJCQgZpaWjhT0+T4TY2vv8iItb/Dw/u/xAQ8P8REfP/WFjV/5+fuP+6usz/1dXg/7u7
        0f+iosP/ubnO/9DQ2v/U1N//2dnl/5GR3f9JSdX/LS3l/xIS9f8REfL/EBDv/yIi2/81Ncj/UFCa/2tr
        bOFGRkbhISEhBiEhIQYnJycGTExTBnFxgOFJSaHhIiLC/xkZ1/8QEO3/EBDt/xER7v9gYNf/r6/B/8rK
        1f/k5Or/1NTg/8XF1v/Q0Nz/3Nzh/+Hh5v/m5uz/wMDm/5qa4f9hYeP/KSnl/x0d6f8REe3/GRna/yIi
        yP9KSqf/cnKH4U9PWeEsLCwGLCwsBjMzM1RWVmVUeXmY/0REr/8PD8f/EBDZ/xIS7P8REer/ERHp/2ho
        2f/AwMr/2trf//T09P/u7u//6Ojq/+jo6f/p6en/7u7u//Pz8//v7/D/6+vu/5aW4v9BQdb/KSng/xIS
        6/8REdn/EBDI/0VFtf96eqP/WFht/zc3N1Q3NzdUQkJCVFVVcVRnZ6D/Ozuy/xAQxf8REdb/ExPn/xIS
        5f8REeP/a2vY/8bGzf/d3eD/9PT0/9vb6P/Dw9z/rq7T/5qayv/Cwtr/6urq/+3t7f/v7/H/urrl/4WF
        2v9MTN7/ExPh/xIS1P8REcf/PDy4/2dnqv9WVnj/RkZGVEZGRlRSUlKYVFR9mFZWqf8zM7b/ERHD/xIS
        0v8UFOL/ExPf/xIS3f9vb9f/zMzR/+Dg4v/09PT/ycnh/56ez/91db3/TEyr/5eXxv/i4uL/6+vr//T0
        9P/f3+n/ysrf/29v2/8VFdj/ExPP/xISxv8zM7z/VVWy/1VVg/9VVVWYVVVVmF1dXZhUVISYS0uq/y4u
        tv8SEsP/ExPQ/xUV3f8TE9j/EhLU/3Jy1P/R0dT/4uLk//T09P/GxuL/mJjR/2Njz/8uLs3/cXHM/7Oz
        yv/T09//8/Pz/+np7v/e3un/hYXb/ywszv8fH8r/ExPG/y4uvP9JSbL/VVWJ/2FhYZhhYWGYaWlpuVRU
        irlAQKz/KSm3/xMTw/8UFM3/FhbY/xQU0v8TE8z/dXXR/9fX1//l5eX/9PT0/8PD5P+Tk9T/UlLi/xER
        8P9LS9H/hYWz/7y80//z8/P/8/Pz//Pz8/+bm9v/RETE/ywsxf8UFMb/KSm8/z4+s/9VVZD/bW1tuW1t
        bblra2u5VVWMuUBArf8pKbj/ExPD/xUVzP8XF9X/FxfN/xYWxf94eM//2tra/+fn5//09PT/wsLj/5CQ
        0v9RUd//EhLs/z8/0f9tbbb/sLDU//Pz8//z8/P/8/Pz/6Ki2/9RUcT/MjLF/xQUxv8pKb3/Pj60/1ZW
        kf9vb2+5b29vuW1tbblXV425QUGu/yoquP8TE8P/FhbL/xkZ0/8ZGcj/Ghq+/3t7zf/d3d3/6Ojo//T0
        9P/AwOL/jY3R/1BQ3f8TE+n/NDTR/1ZWuv+kpNb/8/Pz//Pz8//09PT/qanc/15exP85OcX/FBTG/ykp
        vf8+PrX/V1eT/3FxcblxcXG5Y2NjuVlZiblPT7D/MTG4/xISwf8XF8j/HBzQ/zY2xP9QULn/m5vP/+bm
        5v/t7e3/9PT0/8LC4f+Rkc//XV3T/ygo1/9XV8//h4fH/7293f/z8/P/8/Pz//Pz8/+iotr/UVHB/zIy
        wv8TE8T/MDC9/0xMt/9ZWY//Z2dnuWdnZ7lZWVmYW1uFmF5esv84OLj/EhK//xkZxv8gIM3/U1PB/4eH
        tf+7u9L/7+/v//Hx8f/09PT/xcXg/5aWzf9qasn/Pj7G/3t7zf+4uNX/1dXk//Pz8//y8vL/8vLy/5ub
        2P9FRb7/LCzA/xMTwv83N73/W1u5/1xci/9dXV2YXV1dmEhISJhfX3yYdnax/0NDtv8REbv/GRm//yEh
        w/9ra8f/tLTL/9PT3v/x8fH/8vLy//T09P/c3Or/xMTg/66u3v+YmNz/t7fg/9bW5P/k5Ov/8/Pz/+bm
        6v/a2uL/hYXS/zAwwv8hIcD/EhK+/0JCu/9zc7j/YGCC/0xMTJhMTEyYNzc3VGJidFSOjrH/T0+0/xAQ
        t/8ZGbj/IyO5/4KCzf/i4uL/6+vr//T09P/09PT/9PT0//Pz8//z8/P/8/Pz//Pz8//z8/P/9PT0//Pz
        8//z8/P/29vj/8PD0/9vb8z/GxvG/xYWwP8REbr/Tk65/4yMuP9kZHr/PDw8VDw8PFQrKytUW1tjVIqK
        nP9YWKf/Jiaz/yUlsP8lJaz/fHzA/9PT1P/g4OD/7e3t/+/v7//y8vL/8vLy//Ly8v/y8vL/8vLy//Dw
        8P/u7u7/39/k/9DQ2v+kpND/eXnG/0hIxv8YGMf/Hh6//yQkuP9XV6z/ioqh/11daP8wMDBUMDAwVCAg
        IAZTU1MGh4eH4WFhm+E8PLD/MjKo/ygooP92drP/xMTG/9XV1v/m5ub/6+vr//Dw8P/x8fH/8vLy//Hx
        8f/x8fH/7Ozs/+jo6P/KytX/ra3C/25uvv8wMLr/IiLB/xUVyP8mJr//ODi3/2BgoP+JiYrhV1dX4SUl
        JQYlJSUGEBAQBjk5OQZjY2PhaWmK4W9vsf9KSq3/JSWp/09PtP95ecD/iIjG/5eXzP+bm83/oKDP/6Gh
        z/+iotD/oKDQ/56e0P+Xl9D/kZHQ/35+zf9sbMv/TEzI/y0txf8kJML/Gxu//0REu/9tbbf/amqP/2dn
        Z+E8PD3hEhISBhISEgYAAAAAICAgAEBAQE1xcXlNo6Oz/WJisv0iIrL/KCi2/y4uu/87O7f/SEiz/0xM
        sP9RUa7/UlKu/1NTrv9PT67/S0uv/0JCs/86Orj/MjLG/ysr1P8qKtL/KirR/yUlxP8hIbf/YWG3/6Ki
        t/1zc379RUVFTSIiIk0AAAAAAAAAAAAAAAAQEBAAICAgTU1NUU17e4P9b2+b/WRktP9MTLb/NDS4/zMz
        u/8xMb7/NzfC/z4+xv8+Psb/Pz/H/zo6x/81Ncf/NTXJ/zQ0y/8qKs3/ICDO/ykpyf8xMcX/Skq+/2Nj
        uP9vb5//fHyH/U9PVP0iIiJNERERTQAAAAAAAAAAAAAAAAAAAAAAAAAAKiopAFRUU3J9fYVypqa3/XBw
        tv07O7X/Kyu//xsbyf8jI9P/Kyve/ysr3/8sLOH/Jibg/yAg3/8nJ9//Ly/f/yIi1P8WFsn/JyfB/zk5
        uf9vb7n/paW6/X5+iP1XV1dyKysrcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVFRQAKiopck9P
        U3J0dH39bW2P/WVlov9fX7P/WVnE/09Pyf9GRs//Pj7P/zc30P80NND/MTHP/zw80P9HSND/Tk7K/1VV
        xf9dXbX/ZWWl/21tkv91dYD9UFBV/SsrK3IVFRVyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAISEhAENDQ01paWlNkJCQ4ZOTp+GXl7//fHy//2JiwP9SUsD/QkLA/0JCwP9CQsD/UVHB/2Bh
        wv96e8H/lZXB/5OTqf+RkZHha2tr4UZGRk0jIyNNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAQEBAAISEhTT09PU1ZWVnhYWFr4Wpqfv9nZ4j/ZGST/2Rkm/9jY6L/Y2Oi/2Rk
        o/9kZJz/ZGSV/2dniv9qaoD/YmJt/1tbW+E/Pz/hIyMjTREREU0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAERERACMjIwYwMDAGPT09VFJSUlRnZ2eYdnZ2mIWF
        hbmFhYW5hoaGuXd3d7loaGiYU1NTmD8/P1QyMjJUJiYmBhMTEwYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAREREAIyMjBjAwMAY9PT1UUlJSVGdn
        Z5h2dnaYhYWFuYWFhbmGhoa5d3d3uWhoaJhTU1OYPz8/VDIyMlQmJiYGExMTBgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/wAA//8AAP/8AAA//AAAP/AAAA/wAAAPwAAAA8AAAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAA8AA
        AAPwAAAP8AAAD/wAAD/8AAA//wAA//8AAP8=
</value>
  </data>
</root>